#include <iostream>
using namespace std;

template <class T>
class Node
{
    public:
     T data;
     Node<T> *next;
};

template <class T>
class Queue
{
    private:
     Node<T> *front;
     Node<T> *rear;
    
    public:
     Queue()
     {
         front=rear= NULL;
     }
     
     void Enqueue(T x);
     T Dequeue();
     void Display();
};

template<class T>
void Queue<T>::Enqueue(T x)
{
    Node<T> *t= new Node<T>;
    if(t==NULL)
    {
        cout<<"Queue is Full";
    }
    
    else
    {
        t->data=x;
        t->next=NULL;
        
        if(front==NULL)
        {
            front=rear=t;
        }
        rear->next=t;
        rear=t;
    }
}

template<class T>
T Queue<T>::Dequeue()
{
    Node<T> *p;
    T x=-1;
    if(front ==NULL)
    {
        cout<<"Stack is Empty";
    }
    else
    {
        p = front;
        front = front->next;
        x = p->data;
        delete p;
    }
    return x;
}


template<class T>
void Queue<T>::Display()
{
    Node<T> *p = front; 
    
    while(p!=NULL)
    {
        cout<<p->data<<" ";
        p = p->next;
    }
    cout<<endl;
}

int main()
{
    Queue<char> *q1 = new Queue<char> ();
    q1->Enqueue('A');
    q1->Enqueue('R');
    q1->Enqueue('S');
    q1->Enqueue('H');
    
    
    q1->Display();
    q1->Dequeue();
    q1->Dequeue();
    q1->Dequeue();
    q1->Display();
    
    return 0;
    
}
