#include <iostream>
using namespace std;

template <class T>
class Node
{
    public:
     T data;
     Node<T> *next;
};

template <class T>
class Stack
{
    private:
     Node<T> *top;
    
    public:
     Stack()
     {
         top = NULL;
     }
     
     void Push(T x);
     T Pop();
     T Peek(int index);
     T StackTop();
     int isFull();
     int isEmpty(); 
     void Display();
};

template<class T>
void Stack<T>::Push(T x)
{
    Node<T> *t= new Node<T>;
    if(t==NULL)
    {
        cout<<"Stack is Full";
    }
    
    if(top == NULL)
    {
        t->data=x;
        t->next=NULL;
        top = t;
    }
    else
    {
        t->data=x;
        t->next=top;
        top = t;
    }
}

template<class T>
T Stack<T>::Pop()
{
    Node<T> *p;
    T x=-1;
    if(top ==NULL)
    {
        cout<<"Stack is Empty";
    }
    else
    {
        p = top;
        top = top->next;
        x = p->data;
        delete p;
    }
    return x;
}


template<class T>
T Stack<T>::Peek(int index)
{
    T x = -1;
    Node<T> *p= top;
    
    for(int i=0;p!=NULL && i <index-1;i++)
    {
        p = p->next;
    }
    
    if(p!=NULL)
    {
        x = p->data;
    }
    else
    {
        cout<<"Index Not Present";
    }
    
    return x;
}

template<class T>
T Stack<T>::StackTop()
{
    T x=-1;
    if(top = NULL)
    {
        cout<<"Stack is Empty";
    }
    else
    {
        x= top->data;
    }
    return x;
}

template<class T>
int Stack<T>::isFull()
{
    Node<T> *t = new Node<T>;
    if(t==NULL)
        return 1;
    else
       return 0;
}

template<class T>
int Stack<T>::isEmpty()
{
    if(top==NULL)
    {
        return 1;
    }
    else
    {
        return 0; 
    }
    
}

template<class T>
void Stack<T>::Display()
{
    Node<T> *p = top; 
    
    while(p!=NULL)
    {
        cout<<p->data<<" ";
        p = p->next;
    }
    cout<<endl;
}

int main()
{
    Stack<char> *s1 = new Stack<char> ();
    s1->Push('A');
    s1->Push('R');
    s1->Push('S');
    s1->Push('H');
    s1->Push('I');
    
    s1->Display();
    s1->Pop();
    s1->Display();
    
    cout<<s1->StackTop();
  
 
    
    return 0;
    
}
